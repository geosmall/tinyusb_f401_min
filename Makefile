##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Thu Jan 11 05:45:04 EST 2024]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = cdc_msc


######################################
# building variables
######################################
# debug build?
DEBUG = 0
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = _build

######################################
# source
######################################

INPUT_FILE = file_list_min.txt
SRCS := $(file < $(INPUT_FILE))
# $(info ${SRCS})

C_SOURCES := $(filter %.c,$(SRCS))
# $(info ${C_SOURCES})
ASM_SOURCES := $(filter %.s,$(SRCS))
# $(info ${ASM_SOURCES})

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = -mthumb $(CPU) $(FLOAT-ABI) $(FPU)

# macros for gcc
# AS defines
AS_DEFS = \
-DSTM32F401xC \
-DCFG_TUSB_MCU=OPT_MCU_STM32F4 \
-DBOARD_TUD_RHPORT=0 \
-DBOARD_STM32F401BLACKPILL

# C defines
C_DEFS =  \
-DSTM32F401xC \
-DCFG_TUSB_MCU=OPT_MCU_STM32F4 \
-DBOARD_TUD_RHPORT=0 \
-DBOARD_STM32F401BLACKPILL


# AS includes
AS_INCLUDES = \
-Ihw/bsp/stm32f4/boards/stm32f401blackpill \
-Ilib/CMSIS_5/CMSIS/Core/Include \
-Ihw/mcu/st/cmsis_device_f4/Include \
-Ihw/mcu/st/stm32f4xx_hal_driver/Inc \
-Ihw/bsp/stm32f4 \
-Ihw \
-Isrc/tinyusb/src \
-Iapp/cdc_msc

# C includes
C_INCLUDES =  \
-Ihw/bsp/stm32f4/boards/stm32f401blackpill \
-Ilib/CMSIS_5/CMSIS/Core/Include \
-Ihw/mcu/st/cmsis_device_f4/Include \
-Ihw/mcu/st/stm32f4xx_hal_driver/Inc \
-Ihw/bsp/stm32f4 \
-Ihw \
-Isrc/tinyusb/src \
-Iapp/cdc_msc

WARNINGS = \
-Wall \
-Wextra \
-Werror \
-Wfatal-errors \
-Wdouble-promotion \
-Wstrict-prototypes \
-Wstrict-overflow \
-Werror-implicit-function-declaration \
-Wfloat-equal \
-Wundef -Wshadow \
-Wwrite-strings \
-Wsign-compare \
-Wmissing-format-attribute \
-Wunreachable-code -Wcast-align \
-Wcast-function-type \
-Wcast-qual \
-Wnull-dereference \
-Wuninitialized \
-Wunused \
-Wreturn-type \
-Wredundant-decls

CFLAGS = $(C_DEFS) $(MCU) -MD -g -fdata-sections -ffunction-sections -fsingle-precision-constant -fno-strict-aliasing $(WARNINGS) $(OPT) $(C_INCLUDES)

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# additional flags
CFLAGS += -flto -nostdlib -nostartfiles -Wno-error=cast-align -MD

# Generate dependency information
# CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = hw/bsp/stm32f4/boards/stm32f401blackpill/STM32F401VCTx_FLASH.ld

# linker flags
LDFLAGS_PRE = -Wl,-cref -Wl,-gc-sections -Wl,--print-memory-usage
LDFLAGS_POST = -Wl,--start-group -lgcc -lm -lnosys -lc -Wl,--end-group

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

# jlink flash target device
JLINK_DEVICE = stm32f401cc

#######################################
# build the application
#######################################
# list of ASM program objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
# list of C objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

# assemble .s files
$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) $(CFLAGS) -c $< -o $@

# compile .c files
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) $(CFLAGS) -c $< -o $@

# link .elf files
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) -o $@ -Wl,-Map=$@.map $(LDFLAGS_PRE) $(CFLAGS) -specs=nosys.specs -specs=nano.specs -Wl,-T,$(LDSCRIPT) $(OBJECTS) $(LDFLAGS_POST)
	$(SZ) $@

# create hex file
$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

# create bin file	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	

# create 'build' folder if not exist
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
ifeq ($(OS),Windows_NT)
	cmd /C rmdir /Q /S $(BUILD_DIR)
else
	-rm -fR $(BUILD_DIR)
endif

#######################################
# Jlink
#######################################
ifeq ($(OS),Windows_NT)
  JLINKEXE = JLink.exe
else
  JLINKEXE = JLinkExe
endif

# Jlink Interface
JLINK_IF ?= swd

# Jlink script
$(BUILD_DIR)/$(TARGET).jlink: $(BUILD_DIR)/$(TARGET).hex
	@echo halt > $@
	@echo loadfile $^ >> $@
	@echo r >> $@
	@echo go >> $@
	@echo exit >> $@

# Flash using jlink
flash-jlink: $(BUILD_DIR)/$(TARGET).jlink
	$(JLINKEXE) -device $(JLINK_DEVICE) -if $(JLINK_IF) -JTAGConf -1,-1 -speed auto -CommandFile $<

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***


